import asyncio
import logging
import sys

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters.command import Command

import packages.backend.apps.tg_bot.message_fn as fn
import packages.backend.apps.tg_bot.repository as repository
import packages.backend.apps.tg_bot.service as service
import packages.backend.apps.tg_bot.keyboards as kb

from packages.backend.apps.tg_bot.custom_types import ChatState
from packages.backend.libs.config.tg_config import tg_config
from packages.backend.libs.database.db_instance import db


bot = Bot(tg_config.bot_token, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()
password = tg_config.password


@dp.message(Command('start'))
async def command_start_handler(message: types.Message) -> None:
    chat_state = ChatState.enter_password
    await repository.init_tg_chat(
            chat=message.chat,
            user=message.from_user,
            chat_state=chat_state,
        )
    await message.answer(
            text=(
                'üîë <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é:'
            ),
            parse_mode=ParseMode.HTML
        )


@dp.callback_query()
async def callback_query_handler(call: types.CallbackQuery):
    chat = await repository.get_chat_by_remote_id(call.message.chat.id)
    if not chat:
        await call.message.answer('–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: "/start".')
        return

    chat_id = chat.get('id', None)
    chat_state = chat.get('state', None)

    if chat_state == ChatState.send_email:
        if call.data == 'confirm_send_email':
            await bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
            await fn.send_photo_emails(bot, chat_id, call)
        elif call.data == "cancel_send_email":
            service.delete_pending_file(chat_id)
            await bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ email."
            )
            await call.answer("–û—Ç–º–µ–Ω–∞")

    if chat_state == ChatState.add_agent_email:
        if call.data == "confirm_add_agent":
            pending_data = service.get_pending_agent(chat_id)
            if not pending_data:
                await call.answer("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
                return

            await repository.add_contragent(name=pending_data["name"], email=pending_data["email"])

            service.delete_pending_agent(chat_id)

            await repository.update_chat_state(chat_id, ChatState.contragents)

            await bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
            await call.message.answer("–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.contragents_keyboard)
            await call.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ!")

        elif call.data == "cancel_add_agent":
            service.delete_pending_agent(chat_id)
            await repository.update_chat_state(chat_id, ChatState.contragents)

            await bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
            await call.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.contragents_keyboard)
            await call.answer("–û—Ç–º–µ–Ω–∞")
        return
    if chat_state == ChatState.delete_agent:
        if call.data == "confirm_delete_agent":
            pending_data = service.get_pending_deletion(chat_id)
            if not pending_data or "agent" not in pending_data:
                await call.answer("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)
                return

            agent = pending_data["agent"]
            await repository.delete_agent_by_username(agent["username"])

            service.delete_pending_deletion(chat_id)
            await repository.update_chat_state(chat_id, ChatState.contragents)

            await bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
            await call.message.answer("–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!", reply_markup=kb.contragents_keyboard)
            await call.answer("–£–¥–∞–ª–µ–Ω–æ!")

        elif call.data == "cancel_delete_agent":
            service.delete_pending_deletion(chat_id)
            await repository.update_chat_state(chat_id, ChatState.contragents)

            await bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
            await call.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.contragents_keyboard)
            await call.answer("–û—Ç–º–µ–Ω–∞")
    if chat_state == ChatState.redact_agent:
        if call.data == "customer_username":
            await repository.update_chat_state(chat_id, ChatState.redact_agent_username)
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –∞–≥–µ–Ω—Ç–∞:")
            await call.answer()
            return
        elif call.data == "customer_email":
            await repository.update_chat_state(chat_id, ChatState.redact_agent_email)
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –∞–≥–µ–Ω—Ç–∞:")
            await call.answer()
            return
        elif call.data == "cancel_redact_agent":
            service.delete_pending_redact(chat_id)
            await repository.update_chat_state(chat_id, ChatState.contragents)
            await call.message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.contragents_keyboard)
            await call.answer()
            return
    return



@dp.message()
async def message_handler(message: types.Message) -> None:
    try:
        chat = await repository.get_chat_by_remote_id(message.chat.id)
        if not chat:
            await message.answer('–£–ø—Å! –ù–∞—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–Ω–æ–≤–æ "/start". –ú—ã –∫–æ–µ —á—Ç–æ –æ–±–Ω–æ–≤–∏–ª–∏')
            return

        chat_id = chat['id']
        chat_state = chat['state']

        message_text = message.text.strip() if message.text else None

        if message_text == 'üèò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await fn.go_to_main_page(bot, message, chat_id=chat_id)
            return

        if chat_state == ChatState.send_test_email:
            if message.document:
                service.save_pending_file(chat_id, message.document.file_id, message.document.file_name)
                await fn.test_send_photo_email_message(bot, chat_id, message)
                return

            if message.photo:
                photo_id = message.photo[-1].file_id
                service.save_pending_file(chat_id, photo_id, "photo.jpg")
                await fn.test_send_photo_email_message(bot, chat_id, message)
                return

        if chat_state == ChatState.send_email:
            if not (message.photo or message.document or message_text):
                await message.answer(
                    '‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–µ —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ email.')
                return

            if message.document:
                service.save_pending_file(chat_id, message.document.file_id, message.document.file_name)
                await fn.confirm_send(bot, message, chat_id)
                return

            if message.photo:
                photo_id = message.photo[-1].file_id
                service.save_pending_file(chat_id, photo_id, "photo.jpg")
                await fn.confirm_send(bot, message, chat_id)
                return
            if message_text:
                if message_text == 'üíå –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞':
                    letter = await repository.get_letter()
                    if letter:
                        await message.answer(
                            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {letter['title']}\n"
                            f"<b>–¢–µ–∫—Å—Ç:</b> {letter['text']}",
                            parse_mode=ParseMode.HTML
                        )
                    else:
                        await message.answer("–ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return
                if message_text == '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞':
                    await repository.update_chat_state(chat_id, ChatState.change_letter_title)
                    title = await repository.get_letter()
                    await message.answer(f"<b>–¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:</b>\n\n {title['title']}\n\n"
                                         f"<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞:</b>",
                                         parse_mode=ParseMode.HTML)
                    return

                if message_text == 'üõ† –ò–∑–º–µ–Ω–∏—Ç—å –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞':
                    await repository.update_chat_state(chat_id, ChatState.change_letter_text)
                    title = await repository.get_letter()
                    await message.answer(f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n\n {title['text']}\n\n"
                                         f"<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:</b>",
                                         parse_mode=ParseMode.HTML)
                    return
                if message_text == 'üïπ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ':
                    await repository.update_chat_state(chat_id, ChatState.send_test_email)
                    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:",
                                         parse_mode=ParseMode.HTML)

        else:
            if message.text is None:
                await message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
                return

        message_text = message.text.strip() if message.text else ''

        # ----- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é -----
        if message_text == password and chat_state == ChatState.enter_password:
            await fn.go_to_main_page(bot, message, chat_id=chat_id)
            return

        if message_text == 'üèò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await fn.go_to_main_page(bot, message, chat_id=chat_id)
            return

        if message_text == 'üèû –û—Ç–ø—Ä–∞–≤–∫–∞ –ü–∏—Å—å–º–∞' and chat_state == ChatState.main_page:
            await fn.go_to_send_email_screen(bot, message, chat_id=chat_id)
            return

        if message_text == 'üí° –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã' and chat_state == ChatState.main_page:
            await fn.go_to_contragents_screen(bot, message, chat_id=chat_id)
            return

        if chat_state == ChatState.main_page:
            await message.answer(
                text='ü§∑‚Äç‚ôÇÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. \n–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –º–µ–Ω—é –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç üëá',
                reply_markup=kb.main_page_keyboard,
            )
            return

        # ----- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏ -----
        if chat_state == ChatState.contragents:
            if message_text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞":
                await repository.update_chat_state(chat_id, ChatState.add_agent_name)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:",
                                     reply_markup=kb.contragents_keyboard,
                                     parse_mode=ParseMode.HTML)
                return
            elif message_text == "üóë –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞":
                await repository.update_chat_state(chat_id, ChatState.delete_agent)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:",
                                     reply_markup=kb.contragents_keyboard,
                                     parse_mode=ParseMode.HTML)
                return
            elif message_text == "ü™™ –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤":
                await fn.show_agent_list(message)
                return
            elif message_text == "üñä –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞":
                await repository.update_chat_state(chat_id, ChatState.redact_agent)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≥–µ–Ω—Ç–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
                                     reply_markup=kb.contragents_keyboard,
                                     parse_mode=ParseMode.HTML)
                return
            elif message_text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞":
                await repository.update_chat_state(chat_id, ChatState.add_tester)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ email —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å:",
                                     reply_markup=kb.contragents_keyboard,
                                     parse_mode=ParseMode.HTML)
                return
            elif message_text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞":
                await repository.update_chat_state(chat_id, ChatState.delete_tester)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ email —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å:")
                return
            elif message_text == "ü™™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞":
                testers = await repository.get_testers_emails()
                response_text = "ü™™ –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤:\n\n"
                for tester in testers:
                    response_text += f"{tester['email']}\n"

                await message.answer(text=response_text,
                                     reply_markup=kb.contragents_keyboard,
                                     parse_mode=ParseMode.HTML)
                return


        if chat_state == ChatState.add_agent_name:
            pending_data = {"name": message_text}
            service.save_pending_agent(chat_id, pending_data)
            await repository.update_chat_state(chat_id, ChatState.add_agent_email)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ email –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:",
                                     reply_markup=kb.contragents_keyboard,
                                     parse_mode=ParseMode.HTML)
            return

        if chat_state == ChatState.add_agent_email:
            await fn.confirm_agent_input(message, chat_id, message_text)
            return

        if chat_state == ChatState.delete_agent:
            await fn.confirm_agent_deletion(message, chat_id, message_text)
            return

        if chat_state == ChatState.redact_agent:
            await fn.redact_agent(message, chat_id, message_text)
            return

        if chat_state == ChatState.redact_agent_username:
            pending_redact = service.get_pending_redact(chat_id)
            if not pending_redact:
                await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            client_number = pending_redact.get("client_number")
            await repository.update_agent_username(client_number, message_text)
            service.delete_pending_redact(chat_id)
            await repository.update_chat_state(chat_id, ChatState.contragents)
            await message.answer("–§–ò–û –∞–≥–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!",
                                 reply_markup=kb.contragents_keyboard,
                                 parse_mode=ParseMode.HTML)
            return

            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email
        if chat_state == ChatState.redact_agent_email:
            pending_redact = service.get_pending_redact(chat_id)
            if not pending_redact:
                await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            client_number = pending_redact.get("client_number")
            await repository.update_agent_email(client_number, message_text)
            service.delete_pending_redact(chat_id)
            await repository.update_chat_state(chat_id, ChatState.contragents)
            await message.answer("Email –∞–≥–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!",
                                 reply_markup=kb.contragents_keyboard,
                                 parse_mode=ParseMode.HTML)
            return

        if chat_state == ChatState.change_letter_title:
            await repository.update_letter_title(message_text)
            await repository.update_chat_state(chat_id, ChatState.send_email)
            await message.answer("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!", reply_markup=kb.send_email_keyboard)
            return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞
        if chat_state == ChatState.change_letter_text:
            await repository.update_letter_text(message_text)
            await repository.update_chat_state(chat_id, ChatState.send_email)
            await message.answer("–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!", reply_markup=kb.send_email_keyboard)
            return

        if chat_state == ChatState.add_tester:
            await repository.add_tester(message_text)
            await repository.update_chat_state(chat_id, ChatState.contragents)
            await message.answer("–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.contragents_keyboard)
            return

        if chat_state == ChatState.delete_tester:
            await repository.delete_tester(message_text)
            await repository.update_chat_state(chat_id, ChatState.contragents)
            await message.answer("–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=kb.contragents_keyboard)
            return

    except Exception as e:
        print('[tg_bot][message_handler] error:', e)
        await message.answer('–£–ø—Å! –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞... –ù–∞—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã')


async def main() -> None:
    await db.connect()
    await dp.start_polling(bot)
    await db.close()


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
