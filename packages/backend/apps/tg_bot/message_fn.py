import asyncio
import os

from aiogram import Bot, types
from aiogram.enums import ParseMode

import packages.backend.apps.tg_bot.repository as repository
import packages.backend.apps.tg_bot.service as service
import packages.backend.apps.tg_bot.keyboards as kb

from packages.backend.apps.tg_bot.custom_types import ChatState
from packages.backend.libs.email_sender import send_email


async def go_to_main_page(bot: Bot, message: types.Message, chat_id: str):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await message.answer(
        text=(
            'üöÄ VOYAGER AIüöÄ:\n\n –¢–≤–æ–π –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¶–∏—Ñ—Ä–æ–≤–æ–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç\n\n'
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n\n'
            '–î–∞–≤–∞–π —Ç–≤–æ—Ä–∏—Ç—å –±—É–¥—É—â–µ–µ –≤–º–µ—Å—Ç–µ! üåü\n\n'
            'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá'
        ),
        reply_markup=kb.main_page_keyboard,
    )
    await repository.update_chat_state(chat_id=chat_id, chat_state=ChatState.main_page)


async def go_to_contragents_screen(bot: Bot, message: types.Message, chat_id: str):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await message.answer(
        text=(
            f'üî• –í—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏\n\n'
            f'–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá\n\n'
        ),
        reply_markup=kb.contragents_keyboard,
        parse_mode=ParseMode.HTML,
    )
    await repository.update_chat_state(chat_id=chat_id, chat_state=ChatState.contragents)


async def go_to_send_email_screen(bot: Bot, message: types.Message, chat_id: str):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await message.answer(
        text=(
            f'üî• –†–∞–∑–¥–µ–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º.\n\n'
            f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ email\n\n'

        ),
        reply_markup=kb.send_email_keyboard,
        parse_mode=ParseMode.HTML,
    )
    await repository.update_chat_state(chat_id=chat_id, chat_state=ChatState.send_email)


async def confirm_send(bot, message, chat_id):
    if message.photo:
        file_id = message.photo[-1].file_id
        filename = "photo.jpg"
    elif message.document:
        file_id = message.document.file_id
        filename = message.document.file_name
    else:
        await message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return
    service.save_pending_file(chat_id, file_id, filename)

    await message.answer(
        text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ email?",
        reply_markup=kb.confirm_email_send_keyboard
    )
    return


async def send_photo_emails(bot, chat_id, call):
    pending_data = service.get_pending_file(chat_id)
    if not pending_data:
        await call.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return False

    file_id = pending_data['file_id']
    filename = pending_data['filename']

    file = await bot.download(file_id)
    file_bytes = file.read()

    contragents = await repository.get_all_contragents_emails()
    if not contragents:
        await call.message.answer('‚ùå –ù–µ—Ç –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.')
        await repository.update_chat_state(chat_id, ChatState.main_page)
        return False

    tasks = []
    letter_text = await repository.get_letter()
    for contragent_email in contragents:
        task = asyncio.create_task(
            send_email(
                to_email=contragent_email,
                subject=letter_text['title'],
                body=letter_text['text'],
                attachment=file_bytes,
                filename=filename
            )
        )
        tasks.append(task)
    await asyncio.gather(*tasks, return_exceptions=True)

    await repository.update_chat_state(chat_id, ChatState.main_page)
    await call.message.answer(
        text='‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º –ø–æ email.\nüèò –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        reply_markup=kb.main_page_keyboard,
    )
    service.delete_pending_file(chat_id)
    await call.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    return True


async def confirm_agent_input(message: types.Message, chat_id: int, email_text: str) -> None:
    pending_data = service.get_pending_agent(chat_id)
    if not pending_data:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    pending_data["email"] = email_text
    service.save_pending_agent(chat_id, pending_data)

    await message.answer(
        text=f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞:\n–ò–º—è: {pending_data['name']}\nEmail: {pending_data['email']}",
        reply_markup=kb.confirm_add_keyboard,
        parse_mode=ParseMode.HTML
    )


async def confirm_agent_deletion(message: types.Message, chat_id: int, username_text: str) -> None:
    pending_data = {"username": username_text}
    service.save_pending_deletion(chat_id, pending_data)

    agent = await repository.get_agent_by_username(username_text)
    if not agent:
        await message.answer("–ê–≥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        service.delete_pending_deletion(chat_id)
        return

    pending_data["agent"] = agent
    service.save_pending_deletion(chat_id, pending_data)

    await message.answer(
        text=f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞:\n–ò–ú–Ø: {agent['username']}\nEMAIL: {agent['email']}",
        reply_markup=kb.confirm_delete_keyboard
    )


async def show_agent_list(message: types.Message):
    agents = await repository.get_all_agents()

    if not agents:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    response_text = "ü™™ –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤:\n\n"
    for agent in agents:
        response_text += f"{agent['client_number']}. {agent['username']} --- {agent['email']}\n"

    await message.answer(text=response_text,
                         reply_markup=kb.contragents_keyboard,
                         parse_mode=ParseMode.HTML)


async def redact_agent(message: types.Message, chat_id: int, client_number: str) -> None:
    service.save_pending_redact(chat_id, {"client_number": client_number})
    agent_info = await repository.get_agent_by_client_id(client_number)
    await message.answer(f"–§–ò–û: {agent_info['username']}\n\nemail: {agent_info['email']}\n\n"
                         f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
                         reply_markup=kb.redact_keyboard)


async def test_send_photo_email_message(bot, chat_id, message):
    pending_data = service.get_pending_file(chat_id)
    if not pending_data:
        await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return False

    file_id = pending_data['file_id']
    filename = pending_data['filename']

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await bot.download(file_id)
    file_bytes = file.read()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ email –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    contragents = await repository.get_testers_emails()
    if not contragents:
        await message.answer('‚ùå –ù–µ—Ç –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.')
        await repository.update_chat_state(chat_id, ChatState.main_page)
        return False

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    letter_text = await repository.get_letter()

    tasks = []
    for contragent_email in contragents:
        task = asyncio.create_task(
            send_email(
                to_email=contragent_email,
                subject=letter_text['title'],
                body=letter_text['text'],
                attachment=file_bytes,
                filename=filename
            )
        )
        tasks.append(task)
    await asyncio.gather(*tasks, return_exceptions=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await repository.update_chat_state(chat_id, ChatState.main_page)
    await message.answer(
        text='‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ email –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\nüèò –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        reply_markup=kb.main_page_keyboard,
    )
    service.delete_pending_file(chat_id)
    return True